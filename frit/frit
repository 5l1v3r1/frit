#!/usr/bin/python
import sys
import datetime
import os.path
import configobj
import argparse
import fritutils.termout
import fritcommands
import fritutils.fritlog
from fritutils import fritobjects


def checkInit(args):
    # check to see if .frit already exists
    if not fritutils.isCwdFrit():
        fritcommands.init.initCommand()
        sys.exit(0)
    else:
        fritutils.termout.printWarning("A .frit directory already exists.")
        sys.exit(1)

def mainFrit():
    # Check to see if a command was given.
    if len(sys.argv) < 2:
        fritutils.termout.printWarning('No command was given')
        sys.exit(1)
    # check to see if the current working dir is allowed
    fritutils.noBadPath()
    logger = fritutils.fritlog.loggers['mainfritLog']
    logger.info('Frit starting')
    parser = argparse.ArgumentParser(
            prog="frit",
            description='Forensic Robust Investigation Toolkit'
        )

    parser.add_argument(
        '-v',
        '--verbose',
        action='store_true',
        help='Verbose output.',
        default=False
        )

    parser.add_argument(
        '-d',
        '--debug',
        action='store_true',
        help='Debug messages in log files.',
        default=False
        )

    subparsers = parser.add_subparsers()

    # init
    init_parser = subparsers.add_parser(
            'init',
            help='Initialize frit before first usage.'
        )
    init_parser.set_defaults(func=checkInit,cmd='init')

    # add
    add_parser = subparsers.add_parser(
        'add',
        help='Add files or directories to Evidences.')
    add_parser.add_argument('files', nargs='+')
    add_parser.set_defaults(func=fritcommands.add.factory,cmd='add')

    #status
    status_parser = subparsers.add_parser(
        'status',
        help='Give status of Evidences.')
    status_parser.add_argument('-c','--clean', action='store_true',
        help='Try to unmount and detach Evidences that were left in an'
        ' inconsistent state.')
    status_parser.add_argument('-d','--database', action='store_true',
        help='Give status of sqlite database.')
    status_parser.add_argument('evidences', nargs='*')
    status_parser.set_defaults(func=fritcommands.status.status, cmd='status')

    # mount
    mount_parser = subparsers.add_parser(
        'mount',
        help='Mount Evidences containers and filesystems.')
    mount_parser.add_argument('-c', '--containers', action='store_true',
        help='Mount only containers, not filesystems.')
    mount_parser.add_argument('evidences', nargs='*')
    mount_parser.set_defaults(func=fritcommands.mount.mountCommand, cmd='mount')

    #umount
    umount_parser = subparsers.add_parser(
        'umount',
        help='Umount evidences filesystems and containers.')
    umount_parser.add_argument('evidences', nargs='*')
    umount_parser.set_defaults(func=fritcommands.mount.Umount, cmd='umount')

    #selfcheck
    selfcheck_parser = subparsers.add_parser(
        'selfcheck',
        help='Check if needed external tools are installed.')
    selfcheck_parser.set_defaults(func=fritcommands.selfcheck.selfcheck,
        cmd='selfcheck')

    #undelete
    undelete_parser = subparsers.add_parser(
        'undelete',
        help = 'Undelete files from known filesystems.')
    undelete_parser.add_argument('-l','--list', action='store_true',
        help="List undeleted files.")
    undelete_parser.set_defaults(func=fritcommands.undelete.factory,
        cmd='undelete')

    #getunalloc
    getunalloc_parser = subparsers.add_parser(
        'getunalloc',
        help = 'Extract unallocated space from filesystems.')
    getunalloc_parser.add_argument('-s','--slack', action='store_true',
        help="Extract slack space instead of unallocated.")
    getunalloc_parser.set_defaults(func=fritcommands.getunalloc.factory,
        cmd='getunalloc')

    #getslack
    getslack_parser = subparsers.add_parser(
        'getslack',
        help = 'Extract slack space from filesystems (alias for getunalloc'
        ' --slack)')
    getslack_parser.set_defaults(func=fritcommands.getunalloc.factory,
        cmd='getslack')

    #store
    store_parser = subparsers.add_parser(
        'store',
        help = 'Store files metadata in a sqlite database')
    store_parser.add_argument('evidences', nargs='*')

    store_subparsers = store_parser.add_subparsers()

    store_subcommands = {
        'create' : 'Create the initial database',
        'update' : 'Update metadata in the database',
        'dump' : 'Dump database to stdout',
        'undeleted' : 'Store undeleted files metadata',
        'clear' : 'Delete database',
        'emails' : 'Store undeleted emails metadata'
    }

    for sname,shelp in store_subcommands.items():
        store_sub_parser = store_subparsers.add_parser(sname, help=shelp)
        store_sub_parser.set_defaults(func=fritcommands.store.store,
            cmd=sname)

    store_sub_parser = store_subparsers.add_parser('search',
        help='Search for as filename in database')
    store_sub_parser.set_defaults(func=fritcommands.store.store,
            cmd='search')
    store_sub_parser.add_argument('-t','--terms', nargs='+')

    args = parser.parse_args()

    if args.debug:
        fritutils.fritlog.setLevels('DEBUG')
    startTime = fritutils.startLog(args.cmd,logger)
    args.func(args)

    fritutils.stopLog(args.cmd, startTime, logger)
    sys.exit(0)

if __name__ == '__main__':
    mainFrit()
