Forensic Robust Investigation Toolkit

1. Introduction

The idea behind frit was inspired by the use of git.
It's a command line tool to ease the use of already avaliable
open source forensic tools.
It will help in file triage and dealing with multiple forensic
aquired images.

For example, it will mount and unmount filesystems when needed.
You can even launch different tasks at the same time in different consoles.
Frit will take care of locking mounted filesystems to avoid that another
instance unmount the filesystems accidentally.

Frit is written in Python.

2. Dependencies

elixir (python-elixir)
sqlaclhemy (python-sqlalchemy)

3. Installation

to be written

4. prerequisite

The following prerequisite and advises have to be carrefully read.
You must understand what you do because they could be a security risk
in untrusted environement.
They are to be used when you are the only user of the machine or when
you absolutely trust all the users of the frit program AND the users of
the machine where it's installed.

4.1 Loop devices

Make sure there are enough free loop devices on the system, for example,
modify /etc/modules and insert this line:
loop max_loop=64
This will make 64 loop devices available.

4.2 Block devices

Make sure that the user can use the block devices.
On Debian it have to belong to the 'disk' group.

4.3 NTFS-3G

Make sure that your user can use ntfs-3g, for example: 
 - add an ntfsuser group
 - make your user belonging to this group
 - change the group of the ntfs-3g binary:
   sudo chown root.ntfsuser $(which ntfs-3g)
 - make the ntfs-3g binary suid root and only executable by the group:
    sudo chmod 4750 $(which ntfs-3g)

4.4 sudo

Frit sometimes needs root privileges, for example when it need to mount a
filesystem like FAT.
For this, it uses the "sudo" command. Sudo will ask for password when needed
but most of the time, the user will not be in front of the console when it
happens.
That's why you may want to allow your user to gain root privileges when using
frit without the need of a password.
Be aware of the security risk.

5. Usage

Frit is a command line tool. The synospis is:
frit COMMAND ARGS

5.1 Init

First of all, forensic evidences have to be placed in a same directory tree.
At the root of this tree :
$ frit init

The init command will create the hidden diretory .frit and will create a
basic configuration file .frit/config.

This config file have to be edited and modified in order to have:
A section by evidence file and a subsection by filesystem found on this
evidence.

For example:
[Evidence1]
    Name=pc-badguy.aff
    Format=aff
    [[Filesystem1]]
        Format=NTFS
        Offset=63*512
[Evidence2]
    Name=pc-badguy2.aff
    Format=aff
    [[Filesystem1]]
        Format=NTFS
        Offset=32256
    [[Filesystem2]]
        Format=VFAT
        Offset=71328600*512

The "Name" parameter is the filepath to the evidence.
The "Format" parameter in the evidence section is the format used by the
forensic image (frit currently supported raw files (dd), aff (advenced forensic
format and ewf (encase)).

The "Filesystem#number" subsection must contain the format of this filesystem
(frit currently support
NTFS and vfat) and the offset in bytes where to find this filesystem on the
image.

5.2 mount

The "mount" command will mount each filesystem from each evidence.
It's useful to test that your configuration file is working.
The filesystems are mounted in
".frit/filesystems/Evidence#number/Filesystem#number".

You can then use them normally.

If you are only intersted in mounting containers to access a raw image,
for example to use a carving tool on the raw image, you can use the "mount
containers" command.

5.3 store

Frit use a sqlite3 database to store various elements about the files.
The database itself is a simple slite file stored in ".frit/frit.sqlite".

The metadata that will be stored in the database are:
files names, files pathes, avalaible files dates, files mime types, files
extensions,
md5, sha1 and ssdeep hashes ... and more to come.

The first step is to create the initial database with the command :
$ frit store create

This will mount the filesystems if needed and will store basic informations
about files: pathes, names, dates and extensions.

If you decide to add a new evidence in your case, you will have to updae the
database.
Use the "store update" command for this purpose.
Once you added the new evidence in your config file, use:
$ frit store update

5.4 extensions

The extension command is used to manipulate files based on their extensions.
This command has to be used after the "store init" command is finished.

5.5.1 Counting extensions

$ frit extensions count
This command will list all extensions found on the filesystems along with their
numbers and the total size used by them.

If you pass an extension list as parameter, it will show the count for those
extensions only.
For example, if you want to count "xls" and "doc" files, use this command:
$ frit extensions count .xls .doc

5.5.2 List files matching an extension criteria

If you want to list all files with an "xls" extension, you can try this command:
$ frit extensions list .xls

It will list the full pathname (including the "./frit/..." part) of the ".xls"
files. You can use more than one criteria. If you omit an extension criteria, it
will list all files, sorted by their extension.

5.5.3 Extract files based on their extensions

Let's imagine that we want to extract all "pdf" and "xls" from all evidences.
You can use this command:
$ frit extensions extract .pdf .xls

This will extract the corresponding files in the directory
".frit/extractions/by_extensions/Evidence#number/filesystem#number/..."
The fullpath will be reconstructed behind this path.

5.5 status

to be written

6. Future

What is palnned in the future releases:
- undelete
- carving
- file hashing
- file indexing
- ...

